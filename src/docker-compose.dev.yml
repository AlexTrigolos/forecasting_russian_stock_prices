services:
  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - fastapi
      - streamlit
    networks:
      - default

  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - default

  rabbitmq:
    image: rabbitmq:4.0.5-management
    hostname: rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 10
    env_file:
      - .dev.env
    networks:
      - default
  
  cron:
    build:
      context: ./cron
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - .dev.env
    volumes:
      - ./cron/cron.log:/var/log/cron.log
    networks:
      - default
  
  redis:
    image: redis:7.4.2
    ports:
      - "6379:6379"
    networks:
      - default

  fastapi:
    build:
      context: ./fastapi
    ports:
      - "8000:8000"
    depends_on:
      - db
      - rabbitmq
      - redis
    environment:
      - ENV=production
      - DEBUG=False
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - .dev.env
    volumes:
      - ./logs:/app/logs
    networks:
      - default
    restart: unless-stopped

  streamlit:
    build:
      context: ./streamlit
    ports:
      - "8501:8501"
    env_file:
      - .dev.env
    networks:
      - default

  tg_bot:
    build:
      context: ./tg_bot
    env_file:
      - .dev.env
    networks:
      - default

volumes:
  postgres_data:

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
